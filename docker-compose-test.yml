# docker-compose-test.yml (Test environment)
# Note: Use Compose V2 (docker compose)
# Usage: docker compose --env-file .env.test -f docker-compose.yml -f docker-compose-test.yml up -d
version: '3.9'

services:
  nginx:
    container_name: devcle-nginx-test
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx-test
    volumes: []
    networks:
      - devcle-network

  core:
    container_name: devcle-core-test
    build:
      # Build from core directory
      context: ./core
      # Use development target for hot reloading
      target: development
      # Use the same Dockerfile as production but different target
      dockerfile: ../docker/Dockerfile.core
    environment:
      # Override NODE_ENV for test
      NODE_ENV: test
      # Set CI flag for non-interactive pnpm install
      CI: "true"
      # PostgreSQL environment variables for drizzle-kit
      POSTGRES_DB: ${POSTGRES_DB:-devcle_test}
      POSTGRES_USER: ${POSTGRES_USER:-devcle}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Database host points to postgres service in docker network
      DATABASE_HOST: postgres
      # Redis connection URL points to redis service in docker network
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      # Encryption key for sensitive data (from .env.test)
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    volumes:
      # Mount source code for hot reloading (use host path via LOCAL_WORKSPACE_FOLDER env var)
      - ${LOCAL_WORKSPACE_FOLDER}/core:/app
      # Use named volume to preserve container's node_modules (Linux Alpine binaries)
      - core-node-modules-test:/app/node_modules
    ports:
      # Expose test server on different port
      - "3001:3000"
    # Override command to install dependencies and run development server
    command: sh -c "pnpm install --frozen-lockfile && pnpm dev"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PostgreSQL service for test environment
  postgres:
    image: postgres:15-alpine
    container_name: devcle-postgres-test
    environment:
      # Database name (defaults to 'devcle_test' if not set)
      POSTGRES_DB: ${POSTGRES_DB:-devcle_test}
      # Database user (defaults to 'devcle' if not set)
      POSTGRES_USER: ${POSTGRES_USER:-devcle}
      # Database password (must be set in .env.test)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      # Persist database data using named volume
      - postgres-data-test:/var/lib/postgresql/data
      # Mount initialization script (read-only, executable)
      - ./infra/postgres/init.sh:/docker-entrypoint-initdb.d/01-init.sh:ro
      # Mount RLS policies script (read-only)
      - ./infra/postgres/rls.sql:/docker-entrypoint-initdb.d/02-rls.sql:ro
    networks:
      - devcle-network
    restart: unless-stopped
    ports:
      # Expose postgres port on different port to avoid conflict with dev
      - "55432:5432"
    healthcheck:
      # Check if PostgreSQL is ready to accept connections
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-devcle}"]
      interval: 10s
      timeout: 5s
      retries: 5
      # Allow 30s for postgres to boot before starting healthchecks
      start_period: 30s

  # Redis service for test environment
  redis:
    # Redis 7.x Alpine image for cache, session storage, and job queue (BullMQ)
    image: redis:7-alpine
    container_name: devcle-redis-test
    environment:
      # Redis password for authentication (required)
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    # Override requirepass in redis.conf with environment variable
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
    volumes:
      # Mount redis configuration (read-only)
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      # Persist redis data using named volume for AOF files
      - redis-data-test:/data
    networks:
      - devcle-network
    restart: unless-stopped
    ports:
      # Expose redis port on different port to avoid conflict with dev
      - "56379:6379"
    healthcheck:
      # Verify Redis is ready to accept connections with password authentication
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
      # Allow 10s for redis to boot before starting healthchecks
      start_period: 10s

volumes:
  # Named volume for core's node_modules to preserve Linux Alpine binaries
  core-node-modules-test:
  # Named volume for PostgreSQL data persistence in test
  postgres-data-test:
  # Named volume for Redis data persistence in test
  redis-data-test:

networks:
  devcle-network:
    driver: bridge
