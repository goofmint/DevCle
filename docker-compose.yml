# docker-compose.yml (Production environment)
# Note: Use Compose V2 (docker compose)
version: '3.9'

services:
  nginx:
    image: nginx:1.25-alpine
    container_name: devcle-nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      # Application domain (used in nginx server_name directive)
      APP_DOMAIN: ${APP_DOMAIN:-devcle.com}
    volumes:
      # Mount nginx configuration (read-only)
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Mount SSL certificate files for production (devcle.com)
      # Certificate file
      - ./certs/devcle.com.pem:/etc/nginx/certs/server.crt:ro
      # Private key file
      - ./certs/devcle.com-key.pem:/etc/nginx/certs/server.key:ro
      # Mount static files from core/public (read-only)
      - ./core/public:/var/www/public:ro
    depends_on:
      - core
    networks:
      - devcle-network
    restart: unless-stopped
    healthcheck:
      # Check if nginx master process is running
      test: ["CMD-SHELL", "pgrep nginx || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      # Allow 30s for nginx to boot before starting healthchecks
      start_period: 30s

  core:
    build:
      # Build from core directory
      context: ./core
      # Dockerfile is in app/docker directory
      dockerfile: ../docker/Dockerfile.core
      # Use production target for optimized image
      target: production
    container_name: devcle-core
    environment:
      NODE_ENV: production
      # Database connection string (from .env)
      # In production, this points to an external PostgreSQL server
      DATABASE_URL: ${DATABASE_URL}
      # Redis connection string (from .env)
      # In production, this points to an external Redis server
      REDIS_URL: ${REDIS_URL}
      # Session secret for cookie signing (from .env)
      SESSION_SECRET: ${SESSION_SECRET}
      # Encryption key for sensitive data (from .env)
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    networks:
      - devcle-network
    restart: unless-stopped
    healthcheck:
      # Use Node.js fetch API to check /api/health endpoint
      test: ["CMD-SHELL", "node -e \"fetch('http://localhost:3000/api/health').then(r => r.ok ? process.exit(0) : process.exit(1))\""]
      interval: 30s
      timeout: 10s
      retries: 3
      # Allow 30s for core app to boot before starting healthchecks
      start_period: 30s

# Define a dedicated network for service isolation
networks:
  devcle-network:
    driver: bridge
